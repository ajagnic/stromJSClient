/*
Factory function for Strom Javascript client.
This methods allows more flexibility for users to inherit/extend methods w/o typical JS hiccups.
Uses only native Javascript + socket.io.

Example Usage:
let myClient = StromClient()
myClient.registerDevice('test', template, 'testTopic')

author: Adrian Agnic <adrian@tura.io>

*/
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const StromClient = ({url='http://127.0.0.1:5000', socket=io(url), tokens={}} = {}) => ({
  url,
  socket,
  tokens,
  /* (Private method) Store tokens in dictionary under given name.
    :param name: name to store as key of given token.
    :type name: string
    :param token: unique token from template registration.
    :type token: string
  */
  _setToken(name, token) {
    this.tokens[name] = token;
  },
  /* (Private method) Check if server is running and accessible.
  */
  _ping() {
    let ping_r = new XMLHttpRequest();
    ping_r.open('GET', this.url, true);
    ping_r.onreadystatechange = function() {
      if (ping_r.readyState === 4) {
        if (ping_r.status === 200) {
          console.log(ping_r.responseText);
        }
      }
    };
    ping_r.send();
  },
  /* Format data to contain necessary fields for upload to server.
    :param template: JSON-formatted template
    :type template: string
    :param data: data generated from user
    :type data: JSON-formatted string
  */
  formatData(template, data) {
    let json_tmpl = JSON.parse(template);
    let json_data = data;
    json_tmpl.timestamp = json_data.timestamp;
    json_tmpl.measures.location.val = json_data.location;
    json_tmpl.fields["region-code"] = json_data["region-code"];
    json_tmpl.user_ids.id = json_data.id;
    json_tmpl.user_ids["driver-id"] = json_data["driver-id"];
    json_tmpl.engine_rules["kafka"] = json_data["driver-id"].replace(/\s/g, "");
    let tmpl = json_tmpl;
    return tmpl;
  },
  /* Set token field in data.
    :param name: name of stored token to use for this data
    :type name: string
    :param data: data generated from user
    :type data: JSON-formatted string
  */
  tokenizeData(name, data) {
    let token = this.tokens[name];
    let json_data = data;;
    for (let i = 0; i < json_data.length; i++) {
      json_data[i]['stream_token'] = token;
    }
    return JSON.stringify(json_data);
  },
  /* Register a device with name to store token, template file, and kafka topic.
    :param name: name to use as key for stored token
    :type name: string
    :param template: template to use for registering device
    :type template: JSON-formatted string
    :param topic: name of kafka topic to stream through
    :type topic: byte-string
  */
  registerDevice(name, template, topic) {
    thus = this;
    json_tmpl = JSON.parse(template);
    json_tmpl['engine_rules']['kafka'] = topic;
    new_tmpl = JSON.stringify(json_tmpl);
    let regDev_r = new XMLHttpRequest();
    regDev_r.open('POST', this.url + '/api/define', false);
    regDev_r.onreadystatechange = function() {
      if (regDev_r.readyState === 4) {
        if (regDev_r.status === 200) {
          console.log('Registration Success.');
          thus._setToken(name, regDev_r.responseText);
        }
      }
    };
    regDev_r.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    regDev_r.send('template=' + encodeURIComponent(new_tmpl));
  },
  /* Register an event to listen for.
    :param eventName: name of event to listen for
    :type eventName: string
    :param cb: callback function to run when event is detected
    :type cb: string
    :param passData: flag for passing event data through to callback function
    :type passData: boolean
  */
  registerEvent(eventName, cb, passData=true) {
    socket.on(eventName, function(data) {
      if (passData == true) {
        cb(data);
      } else {
        cb();
      }
    });
  },
  /* Upload data to server to be processed for event recognition.
    :param name: name of stored token to use
    :type name: string
    :param topic: name of kafka topic to stream through
    :type topic: byte-string
    :param data: data generated by user to be analyzed
    :type data: JSON-formatted string
  */
  process(name, topic, data) {
    let token_data = this.tokenizeData(name, data);
    send_r = new XMLHttpRequest();
    send_r.open('POST', this.url + '/api/kafka/load', true);
    send_r.onreadystatechange = function() {
      if (send_r.readyState === 4) {
        if (send_r.status === 202) {
          console.log('Socket data sent.');
        }
      }
    };
    send_r.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    send_r.send('stream_data=' + encodeURIComponent(token_data) + '&topic=' + encodeURIComponent(topic));
  }
});
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
